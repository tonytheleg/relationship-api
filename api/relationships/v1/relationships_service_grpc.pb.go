// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: relationships/v1/relationships_service.proto

package relationships

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KesselRelationshipservice_CreateRelationship_FullMethodName = "/relationships.v1.KesselRelationshipservice/CreateRelationship"
	KesselRelationshipservice_UpdateRelationship_FullMethodName = "/relationships.v1.KesselRelationshipservice/UpdateRelationship"
	KesselRelationshipservice_DeleteRelationship_FullMethodName = "/relationships.v1.KesselRelationshipservice/DeleteRelationship"
)

// KesselRelationshipserviceClient is the client API for KesselRelationshipservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KesselRelationshipserviceClient interface {
	CreateRelationship(ctx context.Context, in *CreateRelationshipRequest, opts ...grpc.CallOption) (*CreateRelationshipResponse, error)
	UpdateRelationship(ctx context.Context, in *UpdateRelationshipRequest, opts ...grpc.CallOption) (*UpdateRelationshipResponse, error)
	DeleteRelationship(ctx context.Context, in *DeleteRelationshipRequest, opts ...grpc.CallOption) (*DeleteRelationshipResponse, error)
}

type kesselRelationshipserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewKesselRelationshipserviceClient(cc grpc.ClientConnInterface) KesselRelationshipserviceClient {
	return &kesselRelationshipserviceClient{cc}
}

func (c *kesselRelationshipserviceClient) CreateRelationship(ctx context.Context, in *CreateRelationshipRequest, opts ...grpc.CallOption) (*CreateRelationshipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRelationshipResponse)
	err := c.cc.Invoke(ctx, KesselRelationshipservice_CreateRelationship_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kesselRelationshipserviceClient) UpdateRelationship(ctx context.Context, in *UpdateRelationshipRequest, opts ...grpc.CallOption) (*UpdateRelationshipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRelationshipResponse)
	err := c.cc.Invoke(ctx, KesselRelationshipservice_UpdateRelationship_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kesselRelationshipserviceClient) DeleteRelationship(ctx context.Context, in *DeleteRelationshipRequest, opts ...grpc.CallOption) (*DeleteRelationshipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRelationshipResponse)
	err := c.cc.Invoke(ctx, KesselRelationshipservice_DeleteRelationship_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KesselRelationshipserviceServer is the server API for KesselRelationshipservice service.
// All implementations must embed UnimplementedKesselRelationshipserviceServer
// for forward compatibility.
type KesselRelationshipserviceServer interface {
	CreateRelationship(context.Context, *CreateRelationshipRequest) (*CreateRelationshipResponse, error)
	UpdateRelationship(context.Context, *UpdateRelationshipRequest) (*UpdateRelationshipResponse, error)
	DeleteRelationship(context.Context, *DeleteRelationshipRequest) (*DeleteRelationshipResponse, error)
	mustEmbedUnimplementedKesselRelationshipserviceServer()
}

// UnimplementedKesselRelationshipserviceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKesselRelationshipserviceServer struct{}

func (UnimplementedKesselRelationshipserviceServer) CreateRelationship(context.Context, *CreateRelationshipRequest) (*CreateRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelationship not implemented")
}
func (UnimplementedKesselRelationshipserviceServer) UpdateRelationship(context.Context, *UpdateRelationshipRequest) (*UpdateRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelationship not implemented")
}
func (UnimplementedKesselRelationshipserviceServer) DeleteRelationship(context.Context, *DeleteRelationshipRequest) (*DeleteRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelationship not implemented")
}
func (UnimplementedKesselRelationshipserviceServer) mustEmbedUnimplementedKesselRelationshipserviceServer() {
}
func (UnimplementedKesselRelationshipserviceServer) testEmbeddedByValue() {}

// UnsafeKesselRelationshipserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KesselRelationshipserviceServer will
// result in compilation errors.
type UnsafeKesselRelationshipserviceServer interface {
	mustEmbedUnimplementedKesselRelationshipserviceServer()
}

func RegisterKesselRelationshipserviceServer(s grpc.ServiceRegistrar, srv KesselRelationshipserviceServer) {
	// If the following call pancis, it indicates UnimplementedKesselRelationshipserviceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KesselRelationshipservice_ServiceDesc, srv)
}

func _KesselRelationshipservice_CreateRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KesselRelationshipserviceServer).CreateRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KesselRelationshipservice_CreateRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KesselRelationshipserviceServer).CreateRelationship(ctx, req.(*CreateRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KesselRelationshipservice_UpdateRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KesselRelationshipserviceServer).UpdateRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KesselRelationshipservice_UpdateRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KesselRelationshipserviceServer).UpdateRelationship(ctx, req.(*UpdateRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KesselRelationshipservice_DeleteRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KesselRelationshipserviceServer).DeleteRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KesselRelationshipservice_DeleteRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KesselRelationshipserviceServer).DeleteRelationship(ctx, req.(*DeleteRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KesselRelationshipservice_ServiceDesc is the grpc.ServiceDesc for KesselRelationshipservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KesselRelationshipservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relationships.v1.KesselRelationshipservice",
	HandlerType: (*KesselRelationshipserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRelationship",
			Handler:    _KesselRelationshipservice_CreateRelationship_Handler,
		},
		{
			MethodName: "UpdateRelationship",
			Handler:    _KesselRelationshipservice_UpdateRelationship_Handler,
		},
		{
			MethodName: "DeleteRelationship",
			Handler:    _KesselRelationshipservice_DeleteRelationship_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relationships/v1/relationships_service.proto",
}
