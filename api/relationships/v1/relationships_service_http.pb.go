// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             (unknown)
// source: relationships/v1/relationships_service.proto

package relationships

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationKesselRelationshipserviceCreateRelationship = "/relationships.v1.KesselRelationshipservice/CreateRelationship"
const OperationKesselRelationshipserviceDeleteRelationship = "/relationships.v1.KesselRelationshipservice/DeleteRelationship"
const OperationKesselRelationshipserviceUpdateRelationship = "/relationships.v1.KesselRelationshipservice/UpdateRelationship"

type KesselRelationshipserviceHTTPServer interface {
	CreateRelationship(context.Context, *CreateRelationshipRequest) (*CreateRelationshipResponse, error)
	DeleteRelationship(context.Context, *DeleteRelationshipRequest) (*DeleteRelationshipResponse, error)
	UpdateRelationship(context.Context, *UpdateRelationshipRequest) (*UpdateRelationshipResponse, error)
}

func RegisterKesselRelationshipserviceHTTPServer(s *http.Server, srv KesselRelationshipserviceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/relationships", _KesselRelationshipservice_CreateRelationship0_HTTP_Handler(srv))
	r.PUT("/api/v1/relationships", _KesselRelationshipservice_UpdateRelationship0_HTTP_Handler(srv))
	r.DELETE("/api/v1/relationships", _KesselRelationshipservice_DeleteRelationship0_HTTP_Handler(srv))
}

func _KesselRelationshipservice_CreateRelationship0_HTTP_Handler(srv KesselRelationshipserviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRelationshipRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselRelationshipserviceCreateRelationship)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRelationship(ctx, req.(*CreateRelationshipRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRelationshipResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselRelationshipservice_UpdateRelationship0_HTTP_Handler(srv KesselRelationshipserviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRelationshipRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselRelationshipserviceUpdateRelationship)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRelationship(ctx, req.(*UpdateRelationshipRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRelationshipResponse)
		return ctx.Result(200, reply)
	}
}

func _KesselRelationshipservice_DeleteRelationship0_HTTP_Handler(srv KesselRelationshipserviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRelationshipRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselRelationshipserviceDeleteRelationship)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRelationship(ctx, req.(*DeleteRelationshipRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRelationshipResponse)
		return ctx.Result(200, reply)
	}
}

type KesselRelationshipserviceHTTPClient interface {
	CreateRelationship(ctx context.Context, req *CreateRelationshipRequest, opts ...http.CallOption) (rsp *CreateRelationshipResponse, err error)
	DeleteRelationship(ctx context.Context, req *DeleteRelationshipRequest, opts ...http.CallOption) (rsp *DeleteRelationshipResponse, err error)
	UpdateRelationship(ctx context.Context, req *UpdateRelationshipRequest, opts ...http.CallOption) (rsp *UpdateRelationshipResponse, err error)
}

type KesselRelationshipserviceHTTPClientImpl struct {
	cc *http.Client
}

func NewKesselRelationshipserviceHTTPClient(client *http.Client) KesselRelationshipserviceHTTPClient {
	return &KesselRelationshipserviceHTTPClientImpl{client}
}

func (c *KesselRelationshipserviceHTTPClientImpl) CreateRelationship(ctx context.Context, in *CreateRelationshipRequest, opts ...http.CallOption) (*CreateRelationshipResponse, error) {
	var out CreateRelationshipResponse
	pattern := "/api/v1/relationships"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselRelationshipserviceCreateRelationship))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselRelationshipserviceHTTPClientImpl) DeleteRelationship(ctx context.Context, in *DeleteRelationshipRequest, opts ...http.CallOption) (*DeleteRelationshipResponse, error) {
	var out DeleteRelationshipResponse
	pattern := "/api/v1/relationships"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselRelationshipserviceDeleteRelationship))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KesselRelationshipserviceHTTPClientImpl) UpdateRelationship(ctx context.Context, in *UpdateRelationshipRequest, opts ...http.CallOption) (*UpdateRelationshipResponse, error) {
	var out UpdateRelationshipResponse
	pattern := "/api/v1/relationships"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKesselRelationshipserviceUpdateRelationship))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
